name: Atualização automática do README

on:
  push:
    branches:
      - main
    paths:
      - 'books/**'
  pull_request:
    branches:
      - main
    paths:
      - 'books/**'
  workflow_dispatch:  # Permite execução manual do workflow

permissions:
  contents: write  # Concede permissão explícita para escrever no repositório

jobs:
  update-readme:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Configurar ambiente Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Executar script de atualização do README
        run: |
          python main.py
      
      - name: Verificar mudanças
        id: git-check
        run: |
          git diff --exit-code README.md || echo "changes=true" >> $GITHUB_OUTPUT
      
      - name: Commit e Push das alterações
        if: steps.git-check.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "Atualização automática do README [skip ci]"
          git push origin HEAD:${GITHUB_REF}
      
      - name: Criar e enviar tag de versão
        if: steps.git-check.outputs.changes == 'true'
        run: |
          # Obtém a data atual no formato YYYYMMDD
          DATE_VERSION=$(date +'%Y%m%d')
          # Conta quantas tags existem com o prefixo da data atual
          TAG_COUNT=$(git tag -l "v${DATE_VERSION}.*" | wc -l)
          # Incrementa o contador para a nova tag
          TAG_COUNT=$((TAG_COUNT + 1))
          # Cria o nome da nova tag
          NEW_TAG="v${DATE_VERSION}.${TAG_COUNT}"
          # Cria a tag localmente
          git tag -a ${NEW_TAG} -m "Atualização automática em $(date +'%d/%m/%Y')"
          # Envia a tag para o repositório remoto
          git push origin ${NEW_TAG}
          echo "Nova tag criada: ${NEW_TAG}"

